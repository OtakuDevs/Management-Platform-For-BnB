// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Skeppsgarden.Data;

#nullable disable

namespace Skeppsgarden.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240225102601_FreshDb-Init")]
    partial class FreshDbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "03f23900-4a30-49e1-aae0-d498b0f2a6b6",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a0d484a-08ef-467c-ab1f-b6fb11239452",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b49330bf-722f-489d-a2d2-a5e0d0473e6b",
                            Email = "skeppsgarden@test.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SKEPPSGARDEN-TEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvM6AMxkSe1wIHzsCIrBV9ZQxwuKz4yl68vNaZbHwaESgV+NlzKgzTidGZ2kiB8mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FODyy1DST0mx6ZlCHac8wA==",
                            TwoFactorEnabled = false,
                            UserName = "skeppsgarden-test"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6a0d484a-08ef-467c-ab1f-b6fb11239452",
                            RoleId = "03f23900-4a30-49e1-aae0-d498b0f2a6b6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Activities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Enjoy the serenity of casting your line into calm waters and embracing the art of fishing. Whether you're a seasoned angler or a novice adventurer, fishing offers a tranquil escape into nature's embrace. Feel the excitement as you wait for the tug on your line, surrounded by the picturesque beauty of lakes, rivers, or the vast ocean. Discover the joy of reeling in your catch and creating cherished memories amidst serene landscapes.",
                            ImageUrl = "~/images/activities/fishing.jpg",
                            Name = "Fishing",
                            Url = ""
                        },
                        new
                        {
                            Id = 2,
                            Description = "Explore scenic landscapes and picturesque routes on an exhilarating cycling adventure. Feel the wind in your face as you pedal through tranquil countryside and challenging trails. Discover hidden gems and breathtaking vistas while embracing the freedom of the open road. Cycling offers invigorating experiences for enthusiasts of all levels.",
                            ImageUrl = "~/images/activities/cycling.jpg",
                            Name = "Cycling",
                            Url = ""
                        },
                        new
                        {
                            Id = 3,
                            Description = "Experience the freedom of hiking amidst nature's wonders. Explore winding trails through forests, mountains, and valleys. Whether you prefer a leisurely walk or a challenging ascent, hiking offers a chance to connect with the wilderness. Immerse yourself in the sights and sounds of nature as you uncover hidden treasures along the way. Embrace the adventure and serenity of hiking.",
                            ImageUrl = "~/images/activities/hiking.jpg",
                            Name = "Hiking",
                            Url = ""
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sail away on an unforgettable coastal journey with a scenic cruise. Experience the beauty of our coastline from the comfort of a boat as you glide through tranquil waters and soak in breathtaking views. Whether you crave relaxation or adventure, our cruise promises an unforgettable experience for all. Discover hidden gems and picturesque landscapes as you sail along our stunning shores.",
                            ImageUrl = "~/images/activities/cruise.jpg",
                            Name = "Cruise",
                            Url = ""
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.BlockedDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("BlockedDates");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0405f662-4ae3-4536-b789-645052a5e771"),
                            Description = "Enjoy an evening filled with laughter as comedians take the stage for an open mic stand-up session.",
                            End = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5708),
                            Image = "~/images/events/comedy.jpg",
                            Location = "Main Stage Skeppsgården",
                            Start = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5704),
                            Title = "Stand-up Open Mic"
                        },
                        new
                        {
                            Id = new Guid("8f53e3b6-129d-4fed-9030-625284d3cfb4"),
                            Description = "Immerse yourself in the soulful tunes of Irish folk music, performed live on the Main Stage at Skeppsgården.",
                            End = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5714),
                            Image = "~/images/events/concert.jpg",
                            Location = "Main Stage Skeppsgården",
                            Start = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5713),
                            Title = "Irish Folk Music"
                        },
                        new
                        {
                            Id = new Guid("297de154-9adf-4cbb-bad1-1cf41675f051"),
                            Description = "Unconventional and ironically entertaining, join the Boring Conference for a unique experience on the Main Stage at Skeppsgården.",
                            End = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5716),
                            Image = "~/images/events/conference.jpg",
                            Location = "Main Stage Skeppsgården",
                            Start = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5716),
                            Title = "Boring Conference"
                        },
                        new
                        {
                            Id = new Guid("0480cafd-5f9b-408e-844b-371adde89559"),
                            Description = "Witness a beautiful union at the grand Mr. and Mrs. Skeppsgården Wedding on the Main Stage, filled with love and joy.",
                            End = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5727),
                            Image = "~/images/events/wedding.jpg",
                            Location = "Main Stage Skeppsgården",
                            Start = new DateTime(2024, 2, 25, 10, 26, 0, 802, DateTimeKind.Utc).AddTicks(5726),
                            Title = "Mr. and Mrs. Skeppsgården Wedding"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.HistoricalReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("CheckInTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("NotesToCustomer")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("HistoricalReservations");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Hyperlink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Hyperlinks");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.LocalPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("LocalPlaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Valdemarsvik is a locality situated alongside the bay of Valdemarsviken, which connects to the Baltic Sea, and is the seat of Valdemarsvik Municipality in Östergötland County, Sweden. The coastal area is a popular summer destination, particularly with Swedish tourists.",
                            ImageUrl = "~/images/local-places/Valdemarsvik.jpg",
                            Name = "Valdemarsvik",
                            Url = "https://www.valdemarsvik.se/visit/"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Gamleby is the second largest locality situated in Västervik Municipality, Kalmar County, Sweden with 2,775 inhabitants in 2010. It is situated about 20 km north-west of Västervik, in the area known as Tjust.",
                            ImageUrl = "~/images/local-places/Gamleby.jpg",
                            Name = "Gamleby",
                            Url = "https://www.gamleby.se/turist.html"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Loftahammar is a locality situated in Västervik Municipality, Kalmar County, Sweden with 404 inhabitants in 2010. It is a coastal town located on a peninsula and has roots dating back to the mid-13th century, with a population that grows by several thousand during the summer months.",
                            ImageUrl = "~/images/local-places/Loftahammar.jpg",
                            Name = "Loftahammar",
                            Url = "https://loftahammar.com/pa-besok/"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Tindered is a popular destination in Småland, Sweden, where visitors can enjoy a variety of activities and amenities. At Tindered Lantkök, the on-site restaurant and café, guests can enjoy fika, home-baked goods, daily specials, and à la carte dishes, as well as visit the farm shop for gifts, locally produced items, newspapers, and ice cream.",
                            ImageUrl = "~/images/local-places/Tindered.jpg",
                            Name = "Tindered",
                            Url = "https://www.tindered.se/"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Västervik is a city and the seat of Västervik Municipality, Kalmar County, Sweden, with 36,747 inhabitants in 2021. It is one of three coastal towns with a notable population size in the province of Småland and is known as the archipelago town in Småland, where visitors can experience tranquility, nature, fun events and at the same time put a golden edge on their existence.",
                            ImageUrl = "~/images/local-places/Vastervik.jpg",
                            Name = "Västervik",
                            Url = "https://www.vastervik.com/"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Vimmerby is a city and the seat of Vimmerby Municipality, Kalmar County, Sweden with 10,934 inhabitants in 2010. It is one of the oldest cities in Sweden and received its charter as early as the fourteenth century, with its main street, Storgatan, still retaining its medieval shape.",
                            ImageUrl = "~/images/local-places/Vimmerby.jpg",
                            Name = "Vimmerby",
                            Url = "https://www.vimmerby.com/"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Norrköping is a city in the province of Östergötland in eastern Sweden and the seat of Norrköping Municipality, Östergötland County, about 160 km southwest of the national capital Stockholm. The city has a population of 95,618 inhabitants in 2016, out of a municipal total of 130,050, making it Sweden’s tenth largest city and eighth largest municipality.",
                            ImageUrl = "~/images/local-places/Norrkoping.jpg",
                            Name = "Norrköping",
                            Url = "https://www.norrkoping.se/"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Kolmården is a densely forested rocky ridge that separates the Swedish provinces of Södermanland and Östergötland, and historically formed the border between the land of the Swedes and the land of the Geats. It is also home to Kolmården Wildlife Park, one of Scandinavia’s most exciting experiences, covering 1.5 square kilometers and home to countless animal species, thrilling rides, and magical shows.",
                            ImageUrl = "~/images/local-places/Kolmarden.jpg",
                            Name = "Kolmården",
                            Url = "https://www.kolmarden.com/"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Söderköping is a locality and the seat of Söderköping Municipality, Östergötland County, Sweden with 6,951 inhabitants in 2010. It is a charming small town with a rich history, located at the mouth of the river Storån on the Baltic Sea coast, and is known for its well-preserved medieval town center and beautiful natural surroundings.",
                            ImageUrl = "~/images/local-places/Soderkoping.jpg",
                            Name = "Söderköping",
                            Url = "https://visit.soderkoping.se/sv/"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Sweden is a Scandinavian nation with thousands of coastal islands and inland lakes, along with vast boreal forests and glaciated mountains. Its principal cities, eastern capital Stockholm and southwestern Gothenburg and Malmö, are all coastal. Stockholm is built on 14 islands. It has more than 50 bridges, as well as the medieval old town, Gamla Stan, royal palaces and museums such as open-air Skansen.",
                            ImageUrl = "~/images/local-places/VisitSweden.jpg",
                            Name = "Visit Sweden",
                            Url = "https://visitsweden.com/"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("MenuItemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemTypeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29fd21df-e695-4d7c-9141-85d8980a0786"),
                            Ingredients = "Mozzarella, breadcrumbs, eggs",
                            MenuItemTypeId = 1,
                            Name = "Mozzarella Sticks",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("0d65328d-cd69-4891-8a02-7f0499f838a3"),
                            Ingredients = "Broccoli, breadcrumbs, eggs",
                            MenuItemTypeId = 1,
                            Name = "Broccoli Bites",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("e3246552-4cbf-4a71-a7ad-2a936441cfa7"),
                            Ingredients = "Shrimp, breadcrumbs, eggs",
                            MenuItemTypeId = 1,
                            Name = "Popcorn Shrimp",
                            Price = 10,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("61bc953f-7287-4e34-97c4-50acec1c6cac"),
                            Ingredients = "Potatoes, oil",
                            MenuItemTypeId = 1,
                            Name = "Waffle fries",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("a099c942-4e83-45e2-93ad-520bff6de197"),
                            Ingredients = "Pasta, tomato sauce, cheese",
                            MenuItemTypeId = 2,
                            Name = "Pasta",
                            Price = 10,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("6abb637c-c833-4612-b711-1d02737574a0"),
                            Ingredients = "Pizza dough, tomato sauce, cheese, ham, mushrooms",
                            MenuItemTypeId = 2,
                            Name = "Pizza",
                            Price = 15,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("2d31aeb3-9bb3-4bd1-944e-e94d266d8ae3"),
                            Ingredients = "Burger bun, beef patty, cheese, lettuce, tomatoes, onions",
                            MenuItemTypeId = 2,
                            Name = "Burger",
                            Price = 12,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("c7879264-b976-4997-82f4-201df8de64c1"),
                            Ingredients = "Beef steak, potatoes, vegetables",
                            MenuItemTypeId = 2,
                            Name = "Steak",
                            Price = 20,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("ceeb4283-761e-4af2-99f0-dc800a7a1d1f"),
                            Ingredients = "Chicken breast, potatoes, vegetables",
                            MenuItemTypeId = 2,
                            Name = "Chicken",
                            Price = 15,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("f8926aa7-5155-49db-9329-a3ac3db81ac9"),
                            Ingredients = "Pasta, tomato sauce, cheese",
                            MenuItemTypeId = 3,
                            Name = "Vegetarian Pasta",
                            Price = 10,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("34ca2a60-3374-4b6e-b5df-bc72a5ee401f"),
                            Ingredients = "Pizza dough, tomato sauce, cheese, mushrooms",
                            MenuItemTypeId = 3,
                            Name = "Vegetarian Pizza",
                            Price = 15,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("fa41c886-ffdf-4213-8f54-87d04080b01b"),
                            Ingredients = "Lettuce, tomatoes, cucumbers, olives, feta cheese",
                            MenuItemTypeId = 3,
                            Name = "Salad",
                            Price = 8,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("f5708deb-a6ff-41e9-b516-6d8b157333ef"),
                            Ingredients = "Burger bun, veggie patty, cheese, lettuce, tomatoes, onions",
                            MenuItemTypeId = 3,
                            Name = "Vegetarian Burger",
                            Price = 12,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("a1b57b59-4322-45c8-ae49-0dad4a7bac53"),
                            Ingredients = "Pasta, tomato sauce, cheese",
                            MenuItemTypeId = 4,
                            Name = "Kid Pasta",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("51f397f7-e0f6-4b58-9d52-f57374083832"),
                            Ingredients = "Pizza dough, tomato sauce, cheese",
                            MenuItemTypeId = 4,
                            Name = "Kid Pizza",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("416f4e4c-2164-4e10-b1ba-2517e2d9b247"),
                            Ingredients = "Burger bun, beef patty, cheese",
                            MenuItemTypeId = 4,
                            Name = "Kid Burger",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("d0625867-b22a-4724-8467-af4c166479d7"),
                            Ingredients = "Ice cream, chocolate sauce, whipped cream",
                            MenuItemTypeId = 5,
                            Name = "Ice cream",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("547a6a05-0612-4c8c-a9fc-25a475309a0b"),
                            Ingredients = "Chocolate cake, chocolate sauce, whipped cream",
                            MenuItemTypeId = 5,
                            Name = "Chocolate cake",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("d4919923-ff55-4d19-8c2a-9ded03398616"),
                            Ingredients = "Cheesecake, chocolate sauce, whipped cream",
                            MenuItemTypeId = 5,
                            Name = "Cheesecake",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        },
                        new
                        {
                            Id = new Guid("459bd294-337e-4971-b3e2-5ee3d695f421"),
                            Ingredients = "Bananas, apples, oranges, kiwis, strawberries",
                            MenuItemTypeId = 5,
                            Name = "Fruit salad",
                            Price = 5,
                            RestaurantId = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9")
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.RequestRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("CheckInTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("CheckInTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("NotesToCustomer")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("023e64ca-0b90-4977-8fba-bfbfeaf794a9"),
                            Description = "Skeppsgården's restaurant is a place where you can enjoy a delicious meal with a beautiful view of the lake. The restaurant is open for breakfast, lunch and dinner. We offer a variety of dishes, including vegetarian and vegan options. We also have a bar with a wide selection of drinks and cocktails.",
                            Image = "~/images/restaurant/restaurant.jpg"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BedTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtraBedId")
                        .HasColumnType("integer");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequested")
                        .HasColumnType("boolean");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ViewTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BedTypeId");

                    b.HasIndex("ExtraBedId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ViewTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            BedTypeId = 2,
                            Capacity = 4,
                            ExtraBedId = 4,
                            Images = "room1.1, room1.2, room1.3",
                            IsAvailable = true,
                            IsRequested = false,
                            Rate = 1200,
                            RoomNumber = 1,
                            RoomTypeId = 3,
                            ViewTypeId = 3
                        },
                        new
                        {
                            Id = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            BedTypeId = 2,
                            Capacity = 2,
                            Images = "room2.1, room2.2, room2.3",
                            IsAvailable = true,
                            IsRequested = false,
                            Rate = 1200,
                            RoomNumber = 2,
                            RoomTypeId = 2,
                            ViewTypeId = 3
                        },
                        new
                        {
                            Id = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            BedTypeId = 2,
                            Capacity = 2,
                            Images = "room3.1, room3.2, room3.3",
                            IsAvailable = true,
                            IsRequested = false,
                            Rate = 1200,
                            RoomNumber = 3,
                            RoomTypeId = 2,
                            ViewTypeId = 3
                        },
                        new
                        {
                            Id = new Guid("462311ac-09ec-4c65-be8d-a7ba24d9c304"),
                            BedTypeId = 2,
                            Capacity = 4,
                            ExtraBedId = 3,
                            Images = "room4.1, room4.2, room4.3",
                            IsAvailable = true,
                            IsRequested = false,
                            Rate = 1300,
                            RoomNumber = 4,
                            RoomTypeId = 3,
                            ViewTypeId = 3
                        },
                        new
                        {
                            Id = new Guid("863e9ef3-7684-4afe-9e47-fa9834692ea3"),
                            BedTypeId = 2,
                            Capacity = 2,
                            Images = "room5.1, room5.2, room5.3",
                            IsAvailable = true,
                            IsRequested = false,
                            Rate = 1100,
                            RoomNumber = 5,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.RoomsFacilityTypes", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("integer");

                    b.HasKey("RoomId", "FacilityTypeId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("RoomsFacilityTypes");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            FacilityTypeId = 1
                        },
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            FacilityTypeId = 2
                        },
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            FacilityTypeId = 3
                        },
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            FacilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            FacilityTypeId = 5
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            FacilityTypeId = 2
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            FacilityTypeId = 3
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            FacilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            FacilityTypeId = 5
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            FacilityTypeId = 6
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            FacilityTypeId = 1
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            FacilityTypeId = 2
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            FacilityTypeId = 3
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            FacilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            FacilityTypeId = 5
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.RoomsUtilityTypes", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("UtilityTypeId")
                        .HasColumnType("integer");

                    b.HasKey("RoomId", "UtilityTypeId");

                    b.HasIndex("UtilityTypeId");

                    b.ToTable("RoomsUtilityTypes");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            UtilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("9abfbe73-72ea-41f7-8c5b-ba90f49ac3cc"),
                            UtilityTypeId = 6
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            UtilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("e8a3dd6d-b138-4cbe-81d4-fcb0df444918"),
                            UtilityTypeId = 6
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            UtilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("8cae901b-6b04-4ada-8353-76f10e080009"),
                            UtilityTypeId = 6
                        },
                        new
                        {
                            RoomId = new Guid("462311ac-09ec-4c65-be8d-a7ba24d9c304"),
                            UtilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("462311ac-09ec-4c65-be8d-a7ba24d9c304"),
                            UtilityTypeId = 5
                        },
                        new
                        {
                            RoomId = new Guid("462311ac-09ec-4c65-be8d-a7ba24d9c304"),
                            UtilityTypeId = 6
                        },
                        new
                        {
                            RoomId = new Guid("863e9ef3-7684-4afe-9e47-fa9834692ea3"),
                            UtilityTypeId = 4
                        },
                        new
                        {
                            RoomId = new Guid("863e9ef3-7684-4afe-9e47-fa9834692ea3"),
                            UtilityTypeId = 6
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.BedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BedTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BunkBed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SofaBed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cot"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.ExtraType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExtraTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BunkBed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SofaBed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cot"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FacilityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PetFriendly"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FreeParking"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SwimmingPool"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FreeWifi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "FlatScreenTV"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lounge"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CaravanParking"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Garden"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Toiletries"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Towels"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bedsheets"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Laundry"
                        },
                        new
                        {
                            Id = 13,
                            Name = "OutdoorFurniture"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wardrobe"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Shower"
                        },
                        new
                        {
                            Id = 16,
                            Name = "SittingArea"
                        },
                        new
                        {
                            Id = 17,
                            Name = "BoardGames"
                        },
                        new
                        {
                            Id = 18,
                            Name = "SharedRefrigerator"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Restaurant"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.MenuItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("MenuItemsTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Appetizer"
                        },
                        new
                        {
                            Id = 2,
                            Type = "MainCourse"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Vegetarian"
                        },
                        new
                        {
                            Id = 4,
                            Type = "KidMenu"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Dessert"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Double"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Family"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.UtilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UtilityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Porch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Terrace"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bathroom"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kitchen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CommonLivingRoom"
                        });
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.ViewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ViewTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "LakeView"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GardenView"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MixedView"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.BlockedDate", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Room", "Room")
                        .WithMany("BlockedDates")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.HistoricalReservation", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.MenuItem", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Types.MenuItemType", "MenuItemType")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItemType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.RequestRoom", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Reservation", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Room", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Types.BedType", "BedType")
                        .WithMany("Rooms")
                        .HasForeignKey("BedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Types.ExtraType", "ExtraBed")
                        .WithMany("Rooms")
                        .HasForeignKey("ExtraBedId");

                    b.HasOne("Skeppsgarden.Data.Models.Types.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Types.ViewType", "ViewType")
                        .WithMany("Rooms")
                        .HasForeignKey("ViewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedType");

                    b.Navigation("ExtraBed");

                    b.Navigation("RoomType");

                    b.Navigation("ViewType");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.RoomsFacilityTypes", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Types.FacilityType", "FacilityType")
                        .WithMany("RoomsFacilityTypes")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Room", "Room")
                        .WithMany("RoomsFacilityTypes")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityType");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.RoomsUtilityTypes", b =>
                {
                    b.HasOne("Skeppsgarden.Data.Models.Room", "Room")
                        .WithMany("RoomsUtilityTypes")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skeppsgarden.Data.Models.Types.UtilityType", "UtilityType")
                        .WithMany("RoomsUtilityTypes")
                        .HasForeignKey("UtilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("UtilityType");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Restaurant", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Room", b =>
                {
                    b.Navigation("BlockedDates");

                    b.Navigation("Reservations");

                    b.Navigation("RoomsFacilityTypes");

                    b.Navigation("RoomsUtilityTypes");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.BedType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.ExtraType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.FacilityType", b =>
                {
                    b.Navigation("RoomsFacilityTypes");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.MenuItemType", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.UtilityType", b =>
                {
                    b.Navigation("RoomsUtilityTypes");
                });

            modelBuilder.Entity("Skeppsgarden.Data.Models.Types.ViewType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
